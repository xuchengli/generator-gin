package controllers

import (
	"<%= project_name %>/application"
	"<%= project_name %>/enums"
  "<%= project_name %>/models"
	"<%= project_name %>/services"
	"<%= project_name %>/types"
	"net/http"

	"github.com/gin-gonic/gin"

  log "github.com/sirupsen/logrus"
)

type UserController struct {
	BasicController
	ctx  application.Context
	user services.UserService
}

func NewUserController(ctx application.Context) UserController {
	return UserController{
		ctx:  ctx,
		user: services.NewUserService(ctx),
	}
}

func (uc *UserController) Register(c *gin.Context) {
  var req types.UserRegisterRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		uc.Error(c, http.StatusBadRequest, enums.InvalidParameter, err.Error())
		return
	}

	log.WithFields(log.Fields{"用户名": req.UserName, "密码": req.Password}).Info("用户注册")

  user := models.UserModel{
    UserName: req.UserName,
    Password: req.Password,
  }
  if err := uc.user.Save(user); err != nil {
    uc.Error(c, http.StatusInternalServerError, enums.InvalidDBOperation, err.Error())
    return
  }
  uc.Success(c)
}

func (uc *UserController) List(c *gin.Context) {
	users, err := uc.user.List()
	if err != nil {
		uc.Error(c, http.StatusInternalServerError, enums.InvalidDBOperation, err.Error())
		return
	}
	uc.Success(c, users)
}